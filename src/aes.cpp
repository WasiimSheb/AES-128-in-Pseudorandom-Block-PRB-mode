#include "aes.hpp"
#include <array>
#include <cstdint>

// AES constants
const uint8_t sbox[256] = {
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,
    0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0,
    0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc,
    0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a,
    0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,
    0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
    0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85,
    0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,
    0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17,
    0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88,
    0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,
    0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9,
    0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6,
    0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,
    0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94,
    0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68,
    0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};


const uint8_t Rcon[11] = {
    0x00, 0x01, 0x02, 0x04, 0x08,
    0x10, 0x20, 0x40, 0x80, 0x1B, 0x36
};

// Helper: rotate a 4-byte word left by 1 byte
std::array<uint8_t, 4> rotWord(const std::array<uint8_t, 4>& word) {
    return {word[1], word[2], word[3], word[0]};
}

// Helper: apply S-box to a 4-byte word
std::array<uint8_t, 4> subWord(const std::array<uint8_t, 4>& word) {
    return {
        sbox[word[0]],
        sbox[word[1]],
        sbox[word[2]],
        sbox[word[3]]
    };
}

AES128::AES128(const std::array<uint8_t, 16>& key) {
    this->key = key;
    keyExpansion();
}

void AES128::keyExpansion() {
    std::array<uint8_t, 176> expanded{};  // 11 round keys Ã— 16 bytes
    for (int i = 0; i < 16; ++i)
        expanded[i] = key[i];

    for (int i = 16, r = 1; i < 176; i += 4) {
        std::array<uint8_t, 4> temp = {expanded[i-4], expanded[i-3], expanded[i-2], expanded[i-1]};

        if (i % 16 == 0) {
            temp = subWord(rotWord(temp));
            temp[0] ^= Rcon[r++];
        }

        for (int j = 0; j < 4; ++j) {
            expanded[i + j] = expanded[i + j - 16] ^ temp[j];
        }
    }

    // Store round keys
    for (int i = 0; i < 11; ++i) {
        for (int j = 0; j < 16; ++j) {
            roundKeys[i][j] = expanded[i * 16 + j];
        }
    }
}

void AES128::addRoundKey(std::array<uint8_t, 16>& state, int round) const{
    for (int i = 0; i < 16; ++i)
        state[i] ^= roundKeys[round][i];
}

void AES128::subBytes(std::array<uint8_t, 16>& state) const{
    for (uint8_t& byte : state)
        byte = sbox[byte];
}

void AES128::shiftRows(std::array<uint8_t, 16>& state) const{
    std::array<uint8_t, 16> temp = state;

    state[1]  = temp[5];
    state[5]  = temp[9];
    state[9]  = temp[13];
    state[13] = temp[1];

    state[2]  = temp[10];
    state[6]  = temp[14];
    state[10] = temp[2];
    state[14] = temp[6];

    state[3]  = temp[15];
    state[7]  = temp[3];
    state[11] = temp[7];
    state[15] = temp[11];
}

uint8_t xtime(uint8_t x) {
    return (x << 1) ^ ((x >> 7) * 0x1b);
}

void AES128::mixColumns(std::array<uint8_t, 16>& s) const{
    for (int i = 0; i < 4; ++i) {
        int col = i * 4;
        uint8_t a = s[col], b = s[col+1], c = s[col+2], d = s[col+3];

        s[col]   = xtime(a) ^ xtime(b) ^ b ^ c ^ d;
        s[col+1] = a ^ xtime(b) ^ xtime(c) ^ c ^ d;
        s[col+2] = a ^ b ^ xtime(c) ^ xtime(d) ^ d;
        s[col+3] = xtime(a) ^ a ^ b ^ c ^ xtime(d);
    }
}

std::array<uint8_t, 16> AES128::encryptBlock(const std::array<uint8_t, 16>& input) const {
    std::array<uint8_t, 16> state = input;

    addRoundKey(state, 0);

    for (int round = 1; round < 10; ++round) {
        subBytes(state);
        shiftRows(state);
        mixColumns(state);
        addRoundKey(state, round);
    }

    subBytes(state);
    shiftRows(state);
    addRoundKey(state, 10);

    return state;
}
